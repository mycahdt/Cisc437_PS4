DROP TABLE ORA_TRANSLATE_MSG;

CREATE TABLE INSTRUCTOR 
(
  SCHOOL_ID NUMBER NOT NULL 
, INSTRUCTOR_ID NUMBER NOT NULL 
, SALUTATION VARCHAR2(5) 
, FIRST_NAME VARCHAR2(25) NOT NULL 
, LAST_NAME VARCHAR2(25) NOT NULL 
, STREET_ADDRESS VARCHAR2(50) NOT NULL 
, ZIP VARCHAR2(5) NOT NULL 
, PHONE VARCHAR2(15) 
, CREATED_BY VARCHAR2(30) NOT NULL 
, CREATED_DATE DATE NOT NULL 
, MODIFIED_BY VARCHAR2(30) NOT NULL 
, MODIFIED_DATE DATE NOT NULL 
, CONSTRAINT INSTRUCTOR_PK PRIMARY KEY 
  (
    SCHOOL_ID 
  , INSTRUCTOR_ID 
  )
  ENABLE 
);


CREATE TABLE ZIPCODE 
(
  ZIP VARCHAR2(5) NOT NULL 
, CITY VARCHAR2(25) 
, STATE CHAR(2) 
, CREATED_BY VARCHAR2(30) NOT NULL 
, CREATED_DATE DATE NOT NULL 
, MODIFIED_BY VARCHAR2(30) NOT NULL 
, MODIFIED_DATE DATE NOT NULL 
, CONSTRAINT ZIPCODE_PK PRIMARY KEY 
  (
    ZIP 
  )
  ENABLE 
);


CREATE TABLE GRADE 
(
  SCHOOL_ID NUMBER NOT NULL 
, STUDENT_ID NUMBER(8) NOT NULL 
, SECTION_ID NUMBER(8) NOT NULL 
, GRADE_TYPE_CODE CHAR(2) NOT NULL 
, GRADE_CODE_OCCURRENCE NUMBER(3) NOT NULL 
, NUMERIC_GRADE NUMBER(5,2) NOT NULL 
, COMMENTS CLOB 
, CREATED_BY VARCHAR2(30) NOT NULL 
, CREATED_DATE DATE NOT NULL 
, MODIFIED_BY VARCHAR2(30) NOT NULL 
, MODIFIED_DATE DATE NOT NULL 
, CONSTRAINT GRADE_PK PRIMARY KEY 
  (
    SCHOOL_ID 
  , STUDENT_ID 
  , SECTION_ID 
  , GRADE_TYPE_CODE 
  , GRADE_CODE_OCCURRENCE 
  )
  ENABLE 
);

CREATE TABLE GRADE_TYPE_WEIGHT 
(
  SCHOOL_ID NUMBER NOT NULL 
, SECTION_ID NUMBER(8) NOT NULL 
, GRADE_TYPE_CODE CHAR(2) NOT NULL 
, NUMBER_PER_SECTION NUMBER(3) NOT NULL 
, PERCENT_OF_FINAL_GRADE NUMBER(3) NOT NULL 
, DROP_LOWEST NUMBER(1) NOT NULL 
, CREATED_BY VARCHAR2(30) NOT NULL 
, CREATED_DATE DATE NOT NULL 
, MODIFIED_BY VARCHAR2(30) NOT NULL 
, MODIFIED_DATE DATE NOT NULL 
, CONSTRAINT GRADE_TYPE_WEIGHT_PK PRIMARY KEY 
  (
    SCHOOL_ID 
  , SECTION_ID 
  , GRADE_TYPE_CODE 
  )
  ENABLE 
);

CREATE TABLE GRADE_TYPE 
(
  SCHOOL_ID NUMBER NOT NULL 
, GRADE_TYPE_CODE CHAR(2) NOT NULL 
, DESCRIPTION VARCHAR2(50) NOT NULL 
, CREATED_BY VARCHAR2(30) NOT NULL 
, CREATED_DATE DATE NOT NULL 
, MODIFIED_BY VARCHAR2(30) NOT NULL 
, MODIFIED_DATE DATE NOT NULL 
, CONSTRAINT GRADE_TYPE_PK PRIMARY KEY 
  (
    SCHOOL_ID 
  , GRADE_TYPE_CODE 
  )
  ENABLE 
);



CREATE TABLE GRADE_CONVERSION 
(
  SCHOOL_ID NUMBER NOT NULL 
, LETTER_GRADE VARCHAR2(2) NOT NULL 
, GRADE_POINT NUMBER(3,2) NOT NULL 
, MAX_GRADE NUMBER(3) NOT NULL 
, MIN_GRADE NUMBER(3) NOT NULL 
, CREATED_BY VARCHAR2(30) NOT NULL 
, CREATED_DATE DATE NOT NULL 
, MODIFIED_BY VARCHAR2(30) NOT NULL 
, MODIFIED_DATE DATE NOT NULL 
, CONSTRAINT GRADE_CONVERSION_PK PRIMARY KEY 
  (
    SCHOOL_ID 
  , LETTER_GRADE 
  )
  ENABLE 
);








ALTER TABLE INSTRUCTOR
ADD CONSTRAINT INSTRUCTOR_FK1 FOREIGN KEY
(
  SCHOOL_ID 
)
REFERENCES SCHOOL
(
  SCHOOL_ID 
)
ENABLE;

ALTER TABLE INSTRUCTOR
ADD CONSTRAINT INSTRUCTOR_FK2 FOREIGN KEY
(
  ZIP 
)
REFERENCES ZIPCODE
(
  ZIP 
)
ENABLE;


ALTER TABLE GRADE
ADD CONSTRAINT GRADE_FK1 FOREIGN KEY
(
  SCHOOL_ID 
)
REFERENCES SCHOOL
(
  SCHOOL_ID 
)
ENABLE;

ALTER TABLE GRADE
ADD CONSTRAINT GRADE_FK2 FOREIGN KEY
(
  SECTION_ID 
, STUDENT_ID 
, SCHOOL_ID 
)
REFERENCES ENROLLMENT
(
  SECTION_ID 
, STUDENT_ID 
, SCHOOL_ID 
)
ENABLE;

ALTER TABLE GRADE
ADD CONSTRAINT GRADE_FK3 FOREIGN KEY
(
  SCHOOL_ID 
, SECTION_ID 
, GRADE_TYPE_CODE 
)
REFERENCES GRADE_TYPE_WEIGHT
(
  SCHOOL_ID 
, SECTION_ID 
, GRADE_TYPE_CODE 
)
ENABLE;


ALTER TABLE GRADE_TYPE_WEIGHT
ADD CONSTRAINT GRADE_TYPE_WEIGHT_FK1 FOREIGN KEY
(
  SCHOOL_ID 
)
REFERENCES SCHOOL
(
  SCHOOL_ID 
)
ENABLE;

ALTER TABLE GRADE_TYPE_WEIGHT
ADD CONSTRAINT GRADE_TYPE_WEIGHT_FK2 FOREIGN KEY
(
  SCHOOL_ID 
, GRADE_TYPE_CODE 
)
REFERENCES GRADE_TYPE
(
  SCHOOL_ID 
, GRADE_TYPE_CODE 
)
ENABLE;

ALTER TABLE GRADE_TYPE_WEIGHT
ADD CONSTRAINT GRADE_TYPE_WEIGHT_FK3 FOREIGN KEY
(
  SECTION_ID 
, SCHOOL_ID 
)
REFERENCES SECTION
(
  SECTION_ID 
, SCHOOL_ID 
)
ENABLE;


ALTER TABLE GRADE_TYPE
ADD CONSTRAINT GRADE_TYPE_FK1 FOREIGN KEY
(
  SCHOOL_ID 
)
REFERENCES SCHOOL
(
  SCHOOL_ID 
)
ENABLE;


ALTER TABLE GRADE_CONVERSION
ADD CONSTRAINT GRADE_CONVERSION_FK1 FOREIGN KEY
(
  SCHOOL_ID 
)
REFERENCES SCHOOL
(
  SCHOOL_ID 
)
ENABLE;



ALTER TABLE SECTION
ADD CONSTRAINT SECTION_FK3 FOREIGN KEY
(
  SCHOOL_ID 
, INSTRUCTOR_ID 
)
REFERENCES INSTRUCTOR
(
  SCHOOL_ID 
, INSTRUCTOR_ID 
)
ENABLE;




DECLARE
    lastinstructor NUMBER;
BEGIN
    SELECT
        MAX(instructor_id) + 1
    INTO lastinstructor
    FROM
        instructor;

    EXECUTE IMMEDIATE 'CREATE SEQUENCE instructor_seq INCREMENT BY 1 START WITH ' || lastinstructor;
END;
/



CREATE OR REPLACE TRIGGER TRG01_INSTRUCTOR BEFORE
    INSERT ON INSTRUCTOR
    FOR EACH ROW
BEGIN
    IF
        inserting
        AND :new.instructor_id IS NULL
    THEN
        :new.instructor_id := instructor_seq.nextval;
    END IF;
END;
/


CREATE OR REPLACE TRIGGER TRG02_INSTRUCTOR BEFORE
    INSERT ON INSTRUCTOR
    FOR EACH ROW
BEGIN
    IF inserting THEN
        :new.created_by := user;
        :new.created_date := sysdate;
    END IF;

    :new.modified_by := user;
    :new.modified_date := sysdate;
END;
/

CREATE OR REPLACE TRIGGER TRG02_ZIPCODE BEFORE
    INSERT ON ZIPCODE
    FOR EACH ROW
BEGIN
    IF inserting THEN
        :new.created_by := user;
        :new.created_date := sysdate;
    END IF;

    :new.modified_by := user;
    :new.modified_date := sysdate;
END;
/

CREATE OR REPLACE TRIGGER TRG02_GRADE BEFORE
    INSERT ON GRADE
    FOR EACH ROW
BEGIN
    IF inserting THEN
        :new.created_by := user;
        :new.created_date := sysdate;
    END IF;

    :new.modified_by := user;
    :new.modified_date := sysdate;
END;
/

CREATE OR REPLACE TRIGGER TRG02_GRADE_CONVERSION BEFORE
    INSERT ON GRADE_CONVERSION
    FOR EACH ROW
BEGIN
    IF inserting THEN
        :new.created_by := user;
        :new.created_date := sysdate;
    END IF;

    :new.modified_by := user;
    :new.modified_date := sysdate;
END;
/

CREATE OR REPLACE TRIGGER TRG02_GRADE_TYPE BEFORE
    INSERT ON GRADE_TYPE
    FOR EACH ROW
BEGIN
    IF inserting THEN
        :new.created_by := user;
        :new.created_date := sysdate;
    END IF;

    :new.modified_by := user;
    :new.modified_date := sysdate;
END;
/

CREATE OR REPLACE TRIGGER TRG02_GRADE_TYPE_WEIGHT BEFORE
    INSERT ON GRADE_TYPE_WEIGHT
    FOR EACH ROW
BEGIN
    IF inserting THEN
        :new.created_by := user;
        :new.created_date := sysdate;
    END IF;

    :new.modified_by := user;
    :new.modified_date := sysdate;
END;
/







